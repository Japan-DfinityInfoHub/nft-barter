type UserProfile = variant {none;};
type Result_2 = 
 variant {
   err: Error;
   ok: vec CanisterID;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: UserProfile;
 };
type Result = 
 variant {
   err: Error;
   ok: CanisterID;
 };
type NFTBarter = 
 service {
   getMyChildCanisters: () -> (Result_2) query;
   getMyProfile: () -> (Result_1) query;
   getTargetNftCanisterId: () -> (CanisterID) query;
   isRegistered: () -> (bool) query;
   mintChildCanister: () -> (Result);
   register: () -> (Result_1);
   updateTargetNftCanisterId: (CanisterID) -> (Result);
 };
type Error = 
 variant {
   alreadyRegistered: text;
   notYetRegistered: text;
   other: text;
   unauthorized: text;
 };
type CanisterID = principal;
service : () -> NFTBarter
