type UserId = principal;
type TokenIndex__1 = nat;
type TokenIndex = nat;
type TokenIdentifier = text;
type Result_5 = 
 variant {
   err: Error;
   ok: NftStatus;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: UserId;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: vec record {
             TokenIndex;
             UserId;
           };
 };
type Result_2 = 
 variant {
   err: Error;
   ok: TokenIndex;
 };
type Result_1 = 
 variant {
   err: Error;
   ok;
 };
type Result = 
 variant {
   err: Error;
   ok: Nft;
 };
type Nft__1 = variant {MyExtStandardNft: TokenIdentifier;};
type NftStatus = 
 variant {
   BidOffered:
    record {
      exhibitNftIndex: TokenIndex__1;
      from: CanisterIDText;
      nft: Nft__1;
      tokenIndexOnOtherCanister: TokenIndex__1;
    };
   BidOffering:
    record {
      exhibitNftIndex: TokenIndex__1;
      nft: Nft__1;
      to: CanisterIDText;
      tokenIndexOnOtherCanister: TokenIndex__1;
    };
   Exhibit: Nft__1;
   ExhibitEnd: Nft__1;
   NotSelected: Nft__1;
   Pending: record {
              nft: Nft__1;
              recipient: CanisterIDText;
            };
   Selected: Nft__1;
   Stay: Nft__1;
   Winning:
    record {
      nft: Nft__1;
      winningNft: Nft__1;
      winningTokenIndex: TokenIndex__1;
    };
 };
type Nft = variant {MyExtStandardNft: TokenIdentifier;};
type Error = 
 variant {
   alreadyRegistered: text;
   notYetRegistered: text;
   other: text;
   unauthorized: text;
 };
type ChildCanister = 
 service {
   acceptBidOffer:
    (record {
       bidToken: TokenIndex;
       exhibitToken: TokenIndex;
     }) -> (Result_2);
   exhibitMyNft: (TokenIndex) -> (Result_1);
   getAssetByTokenIndex: (TokenIndex) -> (Result_5) query;
   getAssetOwnerByTokenIndex: (TokenIndex) -> (Result_4) query;
   getAssetOwners: () -> (vec record {
                                TokenIndex;
                                UserId;
                              }) query;
   getAssets: () -> (vec record {
                           TokenIndex;
                           NftStatus;
                         }) query;
   getAuctionByTokenIndex: (TokenIndex) -> (Result_3) query;
   getAuctions: () ->
    (vec record {
           TokenIndex;
           vec record {
                 TokenIndex;
                 UserId;
               };
         }) query;
   importMyNft: (Nft) -> (Result_2);
   notifyWinner:
    (record {
       bidTokenIndex: TokenIndex;
       exhibitTokenIndex: TokenIndex;
       winningNft: Nft;
     }) -> (Result_1);
   offerBidMyNft:
    (record {
       bidToken: TokenIndex;
       exhibitCanisterId: CanisterIDText__1;
       exhibitToken: TokenIndex;
     }) -> (Result_2);
   selectTokenInAuction:
    (record {
       exhibitTokenIndex: TokenIndex;
       selectedTokenIndex: TokenIndex;
     }) -> (Result_1);
   sendToMe: (TokenIndex) -> (Result);
   withdrawNft: (TokenIndex) -> (Result);
 };
type CanisterIdList = record {myExtStandardNft: CanisterIDText;};
type CanisterIDText__1 = text;
type CanisterIDText = text;
service : (principal, CanisterIdList) -> ChildCanister
